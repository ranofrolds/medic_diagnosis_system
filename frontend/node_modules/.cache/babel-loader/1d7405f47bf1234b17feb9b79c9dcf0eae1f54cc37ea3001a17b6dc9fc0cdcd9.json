{"ast":null,"code":"export default function formatarDados(dados) {\n  const [cpf, nome, idade, sintomas1, sintomas2, sintomas3, sintomas4, sintomas5] = dados; // Desestrutura o array para obter cada elemento\n\n  // Remove as aspas duplas e converte os valores de idade e sintomas para números\n  const cpfFormatado = cpf.replace(/\"/g, \"\");\n  const nomeFormatado = nome.replace(/\"/g, \"\");\n  const idadeFormatada = parseInt(idade.replace(/\"/g, \"\"), 10);\n\n  // Concatena e converte os valores dos sintomas para 0 e 1\n  const sintomas = [sintomas1, sintomas2, sintomas3, sintomas4, sintomas5];\n  const sintomasFormatados = sintomas.map(sintoma => Object.values(JSON.parse(sintoma))).flat().map(valor => valor ? 1 : 0);\n\n  // Retorna o objeto JSON formatado\n  return {\n    cpf: cpfFormatado,\n    nome: nomeFormatado,\n    idade: idadeFormatada,\n    sintomas: sintomasFormatados.join(\"|\") + \"|\"\n  };\n}","map":{"version":3,"names":["formatarDados","dados","cpf","nome","idade","sintomas1","sintomas2","sintomas3","sintomas4","sintomas5","cpfFormatado","replace","nomeFormatado","idadeFormatada","parseInt","sintomas","sintomasFormatados","map","sintoma","Object","values","JSON","parse","flat","valor","join"],"sources":["/home/gabriel/projetos/faculdade/medic_diagnosis_system/frontend/src/components/formatarDados.js"],"sourcesContent":["export default function formatarDados(dados) {\n  const [\n    cpf,\n    nome,\n    idade,\n    sintomas1,\n    sintomas2,\n    sintomas3,\n    sintomas4,\n    sintomas5,\n  ] = dados; // Desestrutura o array para obter cada elemento\n\n  // Remove as aspas duplas e converte os valores de idade e sintomas para números\n  const cpfFormatado = cpf.replace(/\"/g, \"\");\n  const nomeFormatado = nome.replace(/\"/g, \"\");\n  const idadeFormatada = parseInt(idade.replace(/\"/g, \"\"), 10);\n\n  // Concatena e converte os valores dos sintomas para 0 e 1\n  const sintomas = [sintomas1, sintomas2, sintomas3, sintomas4, sintomas5];\n  const sintomasFormatados = sintomas\n    .map((sintoma) => Object.values(JSON.parse(sintoma)))\n    .flat()\n    .map((valor) => (valor ? 1 : 0));\n\n  // Retorna o objeto JSON formatado\n  return {\n    cpf: cpfFormatado,\n    nome: nomeFormatado,\n    idade: idadeFormatada,\n    sintomas: sintomasFormatados.join(\"|\") + \"|\",\n  };\n}"],"mappings":"AAAA,eAAe,SAASA,aAAaA,CAACC,KAAK,EAAE;EAC3C,MAAM,CACJC,GAAG,EACHC,IAAI,EACJC,KAAK,EACLC,SAAS,EACTC,SAAS,EACTC,SAAS,EACTC,SAAS,EACTC,SAAS,CACV,GAAGR,KAAK,CAAC,CAAC;;EAEX;EACA,MAAMS,YAAY,GAAGR,GAAG,CAACS,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;EAC1C,MAAMC,aAAa,GAAGT,IAAI,CAACQ,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;EAC5C,MAAME,cAAc,GAAGC,QAAQ,CAACV,KAAK,CAACO,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;;EAE5D;EACA,MAAMI,QAAQ,GAAG,CAACV,SAAS,EAAEC,SAAS,EAAEC,SAAS,EAAEC,SAAS,EAAEC,SAAS,CAAC;EACxE,MAAMO,kBAAkB,GAAGD,QAAQ,CAChCE,GAAG,CAAEC,OAAO,IAAKC,MAAM,CAACC,MAAM,CAACC,IAAI,CAACC,KAAK,CAACJ,OAAO,CAAC,CAAC,CAAC,CACpDK,IAAI,EAAE,CACNN,GAAG,CAAEO,KAAK,IAAMA,KAAK,GAAG,CAAC,GAAG,CAAE,CAAC;;EAElC;EACA,OAAO;IACLtB,GAAG,EAAEQ,YAAY;IACjBP,IAAI,EAAES,aAAa;IACnBR,KAAK,EAAES,cAAc;IACrBE,QAAQ,EAAEC,kBAAkB,CAACS,IAAI,CAAC,GAAG,CAAC,GAAG;EAC3C,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}